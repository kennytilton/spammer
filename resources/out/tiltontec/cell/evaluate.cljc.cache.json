["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$c-md-name","~$tiltontec.cell.base","~$set-ify","~$tiltontec.util.core","~$caller-ensure","^6","~$*not-to-be*","^6","~$defnp","~$taoensso.tufte","~$caller-drop","^6","~$p","^<","~$c-input?","^6","~$c-synaptic?","^6","~$profile","^<","~$pcell","^6","~$c-value-state","^6","~$c-optimized-away?","^6","~$c-current?","~$tiltontec.cell.integrity","~$c-optimize","^6","~$*one-pulse?*","^E","~$c-valid?","^6","~$any-ref?","^8","~$*causation*","^6","~$*defer-changes*","^6","~$c-pulse","^6","~$wtrx","~$tiltontec.util.base","~$+pulse+","^6","~$c-pulse-last-changed","^6","~$md-ref?","^6","~$rmap-meta-setf","^8","~$c-value","^6","~$profiled","^<","~$with-integrity","^E","~$mdead?","^6","~$err","^8","~$c-callers","^6","~$c-ephemeral?","^6","~$c-ref?","^6","~$c-model","^6","~$c-pulse-observed","^6","~$ia-type","^6","~$c-slot","^6","~$c-rule","^6","~$unlink-from-callers","^6","~$c-formula?","^6","~$c-me","^6","~$c-lazy","^6","~$difference","~$clojure.set","~$trx","^N","~$md-slot-owning?","^6","~$c-useds","^6","~$*call-stack*","^6","~$*c-prop-depth*","^6","~$c-pulse-update","^E","~$c-unbound?","^6","~$without-c-dependency","^6","~$*depender*","^6","~$rmap-setf","^8","~$prog1","^N","~$c-state","^6"],"~:excludes",["~#set",[]],"~:name","~$tiltontec.cell.evaluate","~:imports",null,"~:requires",["^ ","^19","^19","~$tufte","^<","^<","^<","^N","^N","^8","^8","~$cty","^6","^6","^6","~$tiltontec.cell.observer","^1N","^E","^E"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^6","^7","^8","^9","^6","^:","^6","^=","^6","^>","^6","^?","^6","^B","^6","^C","^6","^D","^E","^F","^6","^G","^E","^H","^6","^I","^8","^J","^6","^K","^6","^L","^6","^O","^6","^P","^6","^Q","^6","^R","^8","^S","^6","^V","^6","^W","^8","^X","^6","^Y","^6","^Z","^6","^[","^6","^10","^6","^11","^6","^12","^6","^13","^6","~$c-observe","^1N","^14","^6","^15","^6","^16","^6","^17","^6","^18","^19","^1;","^6","^1<","^6","^1=","^6","^1>","^6","^1?","^E","^1@","^6","^1B","^6","^1C","^8","^1E","^6"],"~:defs",["^ ","~$calculate-and-set",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","~:line",169,"~:column",7,"~:end-line",169,"~:end-column",24,"~:arglists",["~#list",["~$quote",["^20",[["~$c","~$dbgid","~$dbgdata"]]]]],"~:doc","Calculate, link, record, and propagate."],"^1H","~$tiltontec.cell.evaluate/calculate-and-set","~:variadic",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",24,"~:method-params",["^20",[["~$c","^22","^23"]]],"~:protocol-impl",null,"~:arglists-meta",["^20",[null,null]],"^1X",1,"^1W",169,"^1Y",169,"~:max-fixed-arity",3,"~:fn-var",true,"^1[",["^20",["^21",["^20",[["~$c","^22","^23"]]]]],"^24","Calculate, link, record, and propagate."],"~$c-quiesce",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",392,"^1X",7,"^1Y",392,"^1Z",16,"^1[",["^20",["^21",["^20",[["~$c"]]]]]],"^1H","~$tiltontec.cell.evaluate/c-quiesce","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",16,"^27",["^20",[["~$c"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",392,"^1Y",392,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c"]]]]]],"~$c-absorb-value",["^ ","^1H","~$tiltontec.cell.evaluate/c-absorb-value","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",250,"^1X",1,"^1Y",250,"^1Z",24,"~:declared",true,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",250,"^1X",10,"^1Y",250,"^1Z",24,"^2@",true]],"~$md-slot-cell-flushed",["^ ","^1H","~$tiltontec.cell.evaluate/md-slot-cell-flushed","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",438,"^1X",1,"^1Y",440,"^1Z",30,"^2@",true,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",440,"^1X",10,"^1Y",440,"^1Z",30,"^2@",true]],"~$unlink-from-used",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",331,"^1X",7,"^1Y",331,"^1Z",23,"^1[",["^20",["^21",["^20",[["~$c","~$why"]]]]]],"^1H","~$tiltontec.cell.evaluate/unlink-from-used","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",23,"^27",["^20",[["~$c","^2D"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",331,"^1Y",331,"^2:",2,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c","^2D"]]]]]],"~$unchanged-test",["^ ","^1H","~$tiltontec.cell.evaluate/unchanged-test","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",417,"^1X",1,"^1Y",417,"^1Z",25,"^24","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test.","^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",417,"^1X",11,"^1Y",417,"^1Z",25,"^24","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test."],"~:tag","~$cljs.core/MultiFn"],"~$record-dependency",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",53,"^1X",7,"^1Y",53,"^1Z",24,"^1[",["^20",["^21",["^20",[["~$used"]]]]]],"^1H","~$tiltontec.cell.evaluate/record-dependency","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",24,"^27",["^20",[["^2K"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",53,"^1Y",53,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["^2K"]]]]]],"~$ephemeral-reset",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",36,"^1X",7,"^1Y",36,"^1Z",22,"^1[",["^20",["^21",["^20",[["~$rc"]]]]]],"^1H","~$tiltontec.cell.evaluate/ephemeral-reset","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",22,"^27",["^20",[["^2N"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",36,"^1Y",36,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["^2N"]]]]]],"~$optimize-away?!",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",352,"^1X",7,"^1Y",352,"^1Z",22,"^1[",["^20",["^21",["^20",[["~$c","~$prior-value"]]]]],"^24","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."],"^1H","~$tiltontec.cell.evaluate/optimize-away?!","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",22,"^27",["^20",[["~$c","^2Q"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",352,"^1Y",352,"^2:",2,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c","^2Q"]]]]],"^24","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."],"~$ensure-value-is-current",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",63,"^1X",7,"^1Y",63,"^1Z",30,"^1[",["^20",["^21",["^20",[["~$c","~$debug-id","~$ensurer"]]]]],"^24","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"^1H","~$tiltontec.cell.evaluate/ensure-value-is-current","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",30,"^27",["^20",[["~$c","^2T","^2U"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",63,"^1Y",63,"^2:",3,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c","^2T","^2U"]]]]],"^24","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"~$propagate",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",442,"^1X",7,"^1Y",442,"^1Z",16,"^1[",["^20",["^21",["^20",[["~$c","^2Q","~$callers"]]]]],"^24","A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."],"^1H","~$tiltontec.cell.evaluate/propagate","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",16,"^27",["^20",[["~$c","^2Q","^2X"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",442,"^1Y",442,"^2:",3,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c","^2Q","^2X"]]]]],"^24","A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."],"~$md-cell-flush",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",340,"^1X",7,"^1Y",340,"^1Z",20,"^1[",["^20",["^21",["^20",[["~$c"]]]]]],"^1H","~$tiltontec.cell.evaluate/md-cell-flush","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",20,"^27",["^20",[["~$c"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",340,"^1Y",340,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c"]]]]]],"~$c-awaken",["^ ","^1H","~$tiltontec.cell.evaluate/c-awaken","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",213,"^1X",1,"^1Y",213,"^1Z",19,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",213,"^1X",11,"^1Y",213,"^1Z",19],"^2H","^2I"],"~$c-get",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",126,"^1X",7,"^1Y",126,"^1Z",12,"^1[",["^20",["^21",["^20",[["~$c"]]]]],"^24","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."],"^1H","~$tiltontec.cell.evaluate/c-get","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",12,"^27",["^20",[["~$c"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",126,"^1Y",126,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c"]]]]],"^24","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."],"~$not-to-be-self",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",400,"^1X",7,"^1Y",400,"^1Z",21,"^1[",["^20",["^21",["^20",[["~$me"]]]]]],"^1H","~$tiltontec.cell.evaluate/not-to-be-self","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",21,"^27",["^20",[["^35"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",400,"^1Y",400,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["^35"]]]]]],"~$c-value-assume",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",261,"^1X",7,"^1Y",261,"^1Z",21,"^1[",["^20",["^21",["^20",[["~$c","~$new-value","~$propagation-code"]]]]],"^24","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"^1H","~$tiltontec.cell.evaluate/c-value-assume","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",21,"^27",["^20",[["~$c","^38","^39"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",261,"^1Y",261,"^2:",3,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c","^38","^39"]]]]],"^24","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"~$not-to-be",["^ ","^1H","~$tiltontec.cell.evaluate/not-to-be","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",407,"^1X",1,"^1Y",407,"^1Z",20,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",407,"^1X",11,"^1Y",407,"^1Z",20],"^2H","^2I"],"~$md-slot-value-store",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",255,"^1X",7,"^1Y",255,"^1Z",26,"^1[",["^20",["^21",["^20",[["^35","~$slot","~$value"]]]]]],"^1H","~$tiltontec.cell.evaluate/md-slot-value-store","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",26,"^27",["^20",[["^35","^3>","^3?"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",255,"^1Y",255,"^2:",3,"^2;",true,"^1[",["^20",["^21",["^20",[["^35","^3>","^3?"]]]]]],"~$<cget",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",163,"^1X",7,"^1Y",163,"^1Z",12,"^1[",["^20",["^21",["^20",[["~$c"]]]]]],"^1H","~$tiltontec.cell.evaluate/<cget","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",12,"^27",["^20",[["~$c"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",163,"^1Y",163,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c"]]]]]],"~$calculate-and-link",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",187,"^1X",7,"^1Y",187,"^1Z",25,"^1[",["^20",["^21",["^20",[["~$c"]]]]],"^24","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"^1H","~$tiltontec.cell.evaluate/calculate-and-link","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",25,"^27",["^20",[["~$c"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",187,"^1Y",187,"^2:",1,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c"]]]]],"^24","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"~$c-value-changed?",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",429,"^1X",7,"^1Y",429,"^1Z",23,"^1[",["^20",["^21",["^20",[["~$c","^38","~$old-value"]]]]]],"^1H","~$tiltontec.cell.evaluate/c-value-changed?","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",23,"^27",["^20",[["~$c","^38","^3F"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",429,"^1Y",429,"^2:",3,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c","^38","^3F"]]]]]],"~$propagate-to-callers",["^ ","^1T",null,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",506,"^1X",7,"^1Y",506,"^1Z",27,"^1[",["^20",["^21",["^20",[["~$c","^2X"]]]]]],"^1H","~$tiltontec.cell.evaluate/propagate-to-callers","^26",false,"^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1Z",27,"^27",["^20",[["~$c","^2X"]]],"^28",null,"^29",["^20",[null,null]],"^1X",1,"^1W",506,"^1Y",506,"^2:",2,"^2;",true,"^1[",["^20",["^21",["^20",[["~$c","^2X"]]]]]],"~$*custom-propagater*",["^ ","^1H","~$tiltontec.cell.evaluate/*custom-propagater*","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",436,"^1X",1,"^1Y",436,"^1Z",35,"~:dynamic",true,"^1U",["^ ","^1V","/Users/kennethtilton/matrix/cljs/matrix/src/tiltontec/cell/evaluate.cljc","^1W",436,"^1X",16,"^1Y",436,"^1Z",35,"^3L",true],"^2H","~$clj-nil"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^1L","^<","^<","^<","^N","^N","^1M","^6","^6","^6","^E","^E"],"~:cljs.analyzer/constants",["^ ","~:seen",["^1G",["~:callers","~:valid","~:optimized-away","~:caller","~:slot","~:awake","~:c-read","~:cells-flushed","~:cz","~:pre-rule-clear","~:ephemeral-reset","~:dead","~:opti-used","~:else","~:unchanged-if","~:no-propagate","~:uncurrent","~:quiesced","~:default","~:c-awaken-fall-thru","~:propagate","~:nested","~:value","~:type","~:slotv-assume","~:fn-c-awaken","~:nascent","~:evic","~:ref-of","~:tiltontec.cell.base/c-formula","~:pulse-last-changed","~:tell-dependents","~:tiltontec.cell.base/state","~:unref","~:cget","~:useds","~:tiltontec.cell.base/cell","~:quiesce","~:when-value-t","~:cell-awaken","~:reco-dep!!!","~:dead-c","~:once-asked","~:me","~:hierarchy","~:opti-away","~:valid-uninfluenced","~:always","~:used"]],"~:order",["^40","^4Q","^3V","^4<","^4N","^4V","^3U","^4I","^4L","^4;","^4A","^43","^4T","^3X","^4@","^4F","^3W","^4H","^3[","^4:","^4R","^4=","^48","^49","^4B","^4G","^4J","^4M","^4C","^4?","^4>","^3S","^46","^45","^3R","^3Y","^3T","^4S","^3Z","^42","^4K","^4O","^41","^44","^4D","^4P","^4U","^4E","^47"]],"^24",null]